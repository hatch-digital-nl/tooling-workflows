name: Build & Deploy Docker

on:
  workflow_call:
    inputs:
      image_name:
        required: false
        type: string
      registry:
        required: false
        type: string
        default: ghcr.io
      main_branch:
        required: false
        type: string
        default: master
      develop_branch:
        required: false
        type: string
        default: develop
      build_args:
        required: false
        type: string
        description: "Additional build arguments (multiline string)"
      needs_composer_auth:
        required: false
        type: boolean
        description: "Set to true to generate and inject COMPOSER_AUTH token"
        default: false
    outputs:
      image_sha_tag:
        description: "The full image with SHA"
        value: ${{ jobs.build-and-push.outputs.sha_tag }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment: |
      ${{
           github.ref_name == 'master'  && 'Production'
        || github.ref_name == 'main'    && 'Production'
        || github.ref_name == 'develop' && 'Testing'
        || startsWith(github.ref_name, 'release/') && 'Acceptance'
        || 'Unknown'
      }}
    outputs:
      sha_tag: ${{ steps.set_output.outputs.sha_tag }}
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine image name
        id: image
        run: |
          IMAGE_NAME="${{ inputs.image_name }}"
          if [ -z "$IMAGE_NAME" ]; then
            IMAGE_NAME="${GITHUB_REPOSITORY##*/}"
          fi
          echo "image_name=$IMAGE_NAME" >> $GITHUB_OUTPUT

      - name: Extract branch info
        id: extract
        run: |
          BRANCH_NAME="${GITHUB_REF##*/}"
          if [[ "$BRANCH_NAME" == release/* ]]; then
            TAG="${BRANCH_NAME#release/}"   # strip "release/"
          else
            TAG="$BRANCH_NAME"
          fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Prepare build args from secrets
        id: build_args
        run: |
          # Convert secrets JSON to build-args format
          echo '${{ toJSON(secrets) }}' | jq -r 'to_entries[] | "\(.key)=\(.value)"' > build_args.txt
          echo "build_args<<EOF" >> $GITHUB_OUTPUT
          cat build_args.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Prepare Composer Auth
        id: composer_auth
        if: inputs.needs_composer_auth == true
        run: |
          COMPOSER_AUTH='{"github-oauth": {"github.com": "${{ secrets.COMPOSER_GITHUB_TOKEN }}"}}'
          echo "composer_auth=$COMPOSER_AUTH" >> $GITHUB_OUTPUT

      - name: Build & Push image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          build-args: |
            ${{ steps.build_args.outputs.build_args }}
            ${{ inputs.build_args }}
            ${{ inputs.needs_composer_auth == true && format('COMPOSER_AUTH={0}', steps.composer_auth.outputs.composer_auth) || '' }}
          tags: |
            ${{ inputs.registry }}/${{ github.repository_owner }}/${{ steps.image.outputs.image_name }}:${{ github.sha }}
            ${{ inputs.registry }}/${{ github.repository_owner }}/${{ steps.image.outputs.image_name }}:${{ steps.extract.outputs.tag }}
            
      - name: Set job output
        id: set_output
        run: echo "sha_tag=${{ inputs.registry }}/${{ github.repository_owner }}/${{ steps.image.outputs.image_name }}:${{ github.sha }}" >> $GITHUB_OUTPUT

